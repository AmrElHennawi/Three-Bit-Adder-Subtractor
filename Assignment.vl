module half_adder(output sum, output carry, input a, input b);
   xor(sum, a, b);
   and(carry, a, b);
endmodule

module full_adder(output sum, output carry, input x, input y, input z);
   wire s1, c1, c2;
   half_adder h1(s1, c1, x, y);
   half_adder h2(sum, c2, s1, z);
   or(carry, c1, c2);

endmodule

//4x1 mux using 2x1 mux
module mux4x1(
    output wire y,
    input wire a1,
    input wire a2,
    input wire a3,
    input wire a4,
    input wire sel1,
    input wire sel2
);
    wire w1, w2;
    mux2x1 m1(w1, a1, a2, sel1);
    mux2x1 m2(w2, a3, a4, sel1);
    mux2x1 m3(y, w1, w2, sel2);

endmodule

module mux2x1(
  output wire y,
  input wire x0,
  input wire x1,
  input wire sel

);
    wire w1, w2, w3;
    not(w1, sel);
    and(w2, w1, x0);
    and(w3, sel, x1);
    or(y, w2, w3);
endmodule

// * The input is two selection inputs, and two signed integers in 2's complement form: A and B, each integer is 3-bits.
// * The output is a signed integer in 2's complement from: G, its size is 3-bits.
// * When the selection inputs are 00, G = A+1
// * When the selection inputs are 01, G = A+B
// * When the selection inputs are 10, G = B-A
// * When the selection inputs are 11, G = 1-B
// * You must provide a test bench that tests all aspects of the implemented circuit with at least 40 test cases on various input values.
// * You are not allowed to use behavioral Verilog descriptions (if, switch, ..etc) for multiplexers or any other aspects except for test bench.
module three_bit_adder_subtractor(
    input wire [2:0] A,
    input wire [2:0] B,
    input wire [1:0] sel,
    output wire [2:0] G,
    output wire c3
);

    wire w1, w2, w3, w4, w5, w6, w7,w8,w9, c0 ,c1;

    mux4x1 m1(w1 , A[0] , B[0] , B[0] , 1'b1 , sel[0] , sel[1]);
    mux4x1 m2(w2 , 1'b1 , A[0] , A[0] , B[0] , sel[0] , sel[1]);
    xor x1(w7 , sel[1] , w2);
    full_adder f(G[0] , c0 ,  sel[1] , w1 , w7);

    mux4x1 m3(w3, A[1] , B[1] , B[1] , 1'b0 , sel[0] , sel[1]);
    mux4x1 m4(w4 , 1'b0 , A[1] , A[1] , B[1] , sel[0] , sel[1]);
    xor x2(w8 , sel[1] , w4);
    full_adder f1(G[1] , c1,  c0 , w3 , w8);

    mux4x1 m5(w5 , A[2] , B[2] , B[2] , 1'b0 , sel[0] , sel[1]);
    mux4x1 m6(w6 , 1'b0 , A[2] , A[2] , B[2] , sel[0] , sel[1]);
    xor x3(w9 , sel[1] , w6);
    full_adder f2(G[2] , c3,  c1 , w5 , w9);

endmodule
//* You must provide a test bench that tests all aspects
// of the implemented circuit with at 
// least 40 test cases on various input values.


module three_bit_adder_subtractor_test();
    reg [2:0] A, B;
    reg [1:0] sel;
    wire [2:0] G;
    wire c3;
    integer i;
    integer j;
    integer k;
    three_bit_adder_subtractor f(A, B, sel, G, c3);

    initial begin
        $monitor($time, " A=%b, B=%b, sel=%b, G=%b, c3=%b", A, B, sel, G, c3);

            A = 3'b000;
            B = 3'b000;
            sel = 2'b00; 
            for(i=0;i<2;i=i+1) begin
                for(j=0;j<5;j=j+1) begin
                    for(k=0;k<4;k=k+1) begin
                        sel = sel + 1'b1;
                        A = A + 1'b1;
                        B = B + 1'b1;
                        #1;
                    end
                end
            end

        $stop;
    end
endmodule


